package controllers.Staff;

import enums.GenderEnum;
import enums.StatusEnum;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.stage.Modality;
import javafx.stage.Stage;
import model.*;
import repository.*;
import service.BookingService;
import service.PetService;
import utils.DatabaseConnection;
import utils.Session;
import utils.TransactionManager;

import java.io.IOException;
import java.math.BigDecimal;
import java.sql.*;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class NewBookingController {

    @FXML
    private TextField phoneField;
    @FXML
    private TextField customerNameField;
    @FXML
    private TextField addressField;
    @FXML
    private TextField emailField;
    @FXML
    private ComboBox<String> petComboBox;
    @FXML
    private ListView<Service> serviceListView;
    @FXML
    private DatePicker bookingDatePicker;
    @FXML
    private ComboBox<String> bookingTimeComboBox;
    @FXML
    private TextArea notesAreaNewBooking;
    @FXML
    private Button saveButton;
    @FXML
    private Button cancelButton;
    @FXML
    private Button viewHistoryButton;
    @FXML
    private ListView<String> bookedTimesListView;

    private CustomerRepository customerRepository;
    private ServiceRepository serviceRepository;
    private BookingRepository bookingRepository;
    private BookingDetailRepository bookingDetailRepository;
    private PetRepository petRepository;
    private PetTypeRepository petTypeRepository;
    private OrderRepository orderRepository;
    private OrderDetailRepository orderDetailRepository;
    private InvoiceRepository invoiceRepository;
    private Customer selectedCustomer;
    private InvoiceViewController invoiceViewController;
    private BookingService bookingService;
    private PetService petService;
    
    // Th√™m map ƒë·ªÉ l∆∞u tr·ªØ th√¥ng tin v·ªÅ Pet ID theo t√™n
    private Map<String, Integer> petIdMap = new HashMap<>();

    private final List<String> DEFAULT_TIME_SLOTS = IntStream.rangeClosed(8, 21)
            .boxed()
            .flatMap(hour -> List.of(
                String.format("%02d:00", hour), 
                String.format("%02d:30", hour)
            ).stream())
            .collect(Collectors.toList());

    public NewBookingController() {
        try {
            this.customerRepository = CustomerRepository.getInstance();
            this.serviceRepository = ServiceRepository.getInstance();
            this.bookingRepository = BookingRepository.getInstance();
            this.bookingDetailRepository = new BookingDetailRepository();
            this.petRepository = PetRepository.getInstance();
            this.petTypeRepository = PetTypeRepository.getInstance();
            this.orderRepository = OrderRepository.getInstance();
            this.orderDetailRepository = OrderDetailRepository.getInstance();
            this.invoiceRepository = InvoiceRepository.getInstance();
            this.bookingService = new BookingService();
            this.petService = new PetService();
        } catch (Exception e) {
            System.err.println("L·ªói kh·ªüi t·∫°o NewBookingController: " + e.getMessage());
            e.printStackTrace();
        }
    }

    public void setInvoiceViewController(InvoiceViewController controller) {
        this.invoiceViewController = controller;
    }

    @FXML
    public void initialize() {
        bookingTimeComboBox.setItems(FXCollections.observableArrayList(DEFAULT_TIME_SLOTS));
        serviceListView.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);
        loadServices();

        if (bookingDatePicker != null) {
            bookingDatePicker.setValue(LocalDate.now());
            bookingDatePicker.valueProperty().addListener((obs, oldDate, newDate) -> {
                if (newDate != null) {
                    updateBookedTimesList(newDate);
                    updateAvailableTimeSlots(newDate);
                }
            });
        }

        if (phoneField != null) {
            phoneField.textProperty().addListener((obs, oldValue, newValue) -> {
                if (newValue != null && newValue.length() >= 10) {
                    searchCustomer(newValue);
                } else {
                    clearCustomerData();
                }
            });
        }

        bookedTimesListView.setItems(FXCollections.observableArrayList());
        viewHistoryButton.setDisable(true);

        if (bookingDatePicker.getValue() != null) {
            updateBookedTimesList(bookingDatePicker.getValue());
            updateAvailableTimeSlots(bookingDatePicker.getValue());
        }

        initializeCustomerFromSession();
        System.out.println("NewBookingController kh·ªüi t·∫°o th√†nh c√¥ng");
    }

    private void initializeCustomerFromSession() {
        try {
            Integer selectedCustomerId = (Integer) Session.getInstance().getAttribute("selectedCustomerId");
            if (selectedCustomerId != null) {
                Customer customer = customerRepository.selectById(selectedCustomerId);
                if (customer != null) {
                    selectedCustomer = customer;
                    phoneField.setText(customer.getPhone());
                    customerNameField.setText(customer.getFullName());
                    addressField.setText(customer.getAddress());
                    emailField.setText(customer.getEmail());
                    loadPetsByCustomer(selectedCustomerId);
                    viewHistoryButton.setDisable(false);
                }
            }
        } catch (Exception e) {
            System.err.println("L·ªói khi l·∫•y th√¥ng tin kh√°ch h√†ng t·ª´ Session: " + e.getMessage());
            showAlert(Alert.AlertType.ERROR, "L·ªói", "Kh√¥ng th·ªÉ t·∫£i th√¥ng tin kh√°ch h√†ng", 
                "L·ªói: " + e.getMessage());
        }
    }

    private void clearCustomerData() {
        selectedCustomer = null;
        customerNameField.clear();
        addressField.clear();
        emailField.clear();
        petComboBox.getItems().clear();
        petIdMap.clear(); // X√≥a map
        viewHistoryButton.setDisable(true);
    }

 // Trong NewBookingController.java
 // C·∫£i thi·ªán ph∆∞∆°ng th·ª©c hi·ªÉn th·ªã th·ªùi gian ƒë√£ ƒë·∫∑t
 private void updateBookedTimesList(LocalDate date) {
     try {
         List<Booking> bookings = bookingRepository.getBookingsByDate(date);
         List<String> bookedTimesInfo = new ArrayList<>();
         
         // Ph√¢n lo·∫°i theo tr·∫°ng th√°i
         Map<StatusEnum, String> statusColors = new HashMap<>();
         statusColors.put(StatusEnum.PENDING, "üü°");    // M√†u v√†ng - ch·ªù x√°c nh·∫≠n
         statusColors.put(StatusEnum.CONFIRMED, "üü¢");  // M√†u xanh - ƒë√£ x√°c nh·∫≠n
         statusColors.put(StatusEnum.COMPLETED, "üîµ");  // M√†u xanh lam - ho√†n th√†nh
         statusColors.put(StatusEnum.CANCELLED, "üî¥");  // M√†u ƒë·ªè - ƒë√£ h·ªßy
         
         // S·∫Øp x·∫øp booking theo th·ªùi gian
         bookings.sort(Comparator.comparing(Booking::getBookingTime));
         
         for (Booking booking : bookings) {
             if (booking.getBookingTime() == null) continue;
             
             // L·∫•y th√¥ng tin d·ªãch v·ª•
             String serviceName = getServiceNameFromBooking(booking);
             
             // L·∫•y th√¥ng tin kh√°ch h√†ng
             String customerInfo = booking.getCustomer() != null ? 
                 booking.getCustomer().getFullName() + 
                 " (" + booking.getCustomer().getPhone() + ")" : "Kh√¥ng r√µ";
             
             // L·∫•y th√¥ng tin th√∫ c∆∞ng
             String petInfo = booking.getPet() != null ? booking.getPet().getName() : "Kh√¥ng r√µ";
             
             // L·∫•y tr·∫°ng th√°i v√† icon t∆∞∆°ng ·ª©ng
             String statusIcon = statusColors.getOrDefault(booking.getStatus(), "‚ö™Ô∏è");
             
             // ƒê·ªãnh d·∫°ng th·ªùi gian
             String timeInfo = booking.getBookingTime().format(DateTimeFormatter.ofPattern("HH:mm"));
             
             // T·∫°o chu·ªói th√¥ng tin ƒë·∫ßy ƒë·ªß
             String bookingInfo = String.format("%s - %s - %s - %s %s - %s",
                 statusIcon,
                 timeInfo,
                 serviceName,
                 customerInfo,
                 booking.getStatus() != null ? "(" + booking.getStatus() + ")" : "",
                 petInfo
             );
             
             bookedTimesInfo.add(bookingInfo);
         }
         
         // Th√™m ch√∫ th√≠ch m√†u
         if (!bookedTimesInfo.isEmpty()) {
             bookedTimesInfo.add(0, "--- Ch√∫ th√≠ch: üü° Ch·ªù x√°c nh·∫≠n | üü¢ ƒê√£ x√°c nh·∫≠n | üîµ Ho√†n th√†nh | üî¥ ƒê√£ h·ªßy ---");
         } else {
             bookedTimesInfo.add("Kh√¥ng c√≥ l·ªãch h·∫πn n√†o v√†o ng√†y n√†y");
         }
                 
         bookedTimesListView.setItems(FXCollections.observableArrayList(bookedTimesInfo));
         
         // T√πy ch·ªânh hi·ªÉn th·ªã v·ªõi CSS
         bookedTimesListView.setCellFactory(listView -> new ListCell<String>() {
             @Override
             protected void updateItem(String item, boolean empty) {
                 super.updateItem(item, empty);
                 if (empty || item == null) {
                     setText(null);
                     setStyle("");
                 } else {
                     setText(item);
                     if (item.startsWith("---")) {
                         // Style cho d√≤ng ch√∫ th√≠ch
                         setStyle("-fx-font-style: italic; -fx-font-size: 11; -fx-text-fill: #666;");
                     } else if (item.contains("(PENDING)")) {
                         // Style cho tr·∫°ng th√°i ch·ªù x√°c nh·∫≠n
                         setStyle("-fx-background-color: rgba(255, 255, 224, 0.3);");
                     } else if (item.contains("(CONFIRMED)")) {
                         // Style cho tr·∫°ng th√°i ƒë√£ x√°c nh·∫≠n
                         setStyle("-fx-background-color: rgba(200, 255, 200, 0.3);");
                     } else if (item.contains("(COMPLETED)")) {
                         // Style cho tr·∫°ng th√°i ho√†n th√†nh
                         setStyle("-fx-background-color: rgba(200, 200, 255, 0.3);");
                     } else if (item.contains("(CANCELLED)")) {
                         // Style cho tr·∫°ng th√°i ƒë√£ h·ªßy
                         setStyle("-fx-background-color: rgba(255, 200, 200, 0.3);");
                     }
                 }
             }
         });
     } catch (Exception e) {
         System.err.println("L·ªói khi t·∫£i danh s√°ch l·ªãch h·∫πn trong ng√†y: " + e.getMessage());
         e.printStackTrace();
     }
 }
 private void updateAvailableTimeSlots(LocalDate date) {
	    try {
	        // Gi·ªù l√†m vi·ªác m·∫∑c ƒë·ªãnh t·ª´ 8:00 ƒë·∫øn 21:30 (30 ph√∫t m·ªói slot)
	        final List<String> DEFAULT_TIME_SLOTS = IntStream.rangeClosed(8, 21)
	            .boxed()
	            .flatMap(hour -> List.of(
	                String.format("%02d:00", hour), 
	                String.format("%02d:30", hour)
	            ).stream())
	            .collect(Collectors.toList());
	            
	        // Ki·ªÉm tra ng√†y ƒë√£ qua hay ch∆∞a
	        LocalDate today = LocalDate.now();
	        LocalTime currentTime = LocalTime.now();
	        
	        // Map l∆∞u c√°c time slots v√† tr·∫°ng th√°i (true = available, false = booked)
	        Map<String, Boolean> timeSlotAvailability = new LinkedHashMap<>();
	        
	        // Kh·ªüi t·∫°o t·∫•t c·∫£ c√°c slots l√† available
	        for (String timeSlot : DEFAULT_TIME_SLOTS) {
	            timeSlotAvailability.put(timeSlot, true);
	        }
	        
	        // X·ª≠ l√Ω ng√†y v√† th·ªùi gian ƒë√£ qua
	        if (date.isBefore(today)) {
	            // Ng√†y qu√° kh·ª©: kh√¥ng c√≥ slot n√†o kh·∫£ d·ª•ng
	            timeSlotAvailability.replaceAll((slot, available) -> false);
	        } else if (date.isEqual(today)) {
	            // Ng√†y hi·ªán t·∫°i: v√¥ hi·ªáu h√≥a c√°c slot ƒë√£ qua
	            for (String timeSlot : DEFAULT_TIME_SLOTS) {
	                try {
	                    LocalTime slotTime = LocalTime.parse(timeSlot, DateTimeFormatter.ofPattern("HH:mm"));
	                    // V√¥ hi·ªáu c√°c slot ƒë√£ qua ho·∫∑c s·∫Øp t·ªõi (trong v√≤ng 30 ph√∫t)
	                    if (slotTime.isBefore(currentTime.plusMinutes(30))) {
	                        timeSlotAvailability.put(timeSlot, false);
	                    }
	                } catch (Exception e) {
	                    System.err.println("L·ªói khi ph√¢n t√≠ch th·ªùi gian: " + e.getMessage());
	                    // ƒê√°nh d·∫•u kh√¥ng kh·∫£ d·ª•ng n·∫øu c√≥ l·ªói
	                    timeSlotAvailability.put(timeSlot, false);
	                }
	            }
	        }
	        
	        // L·∫•y danh s√°ch booking trong ng√†y
	        String sql = 
	            "SELECT b.booking_id, b.booking_time, b.staff_id, " +
	            "(SELECT COALESCE(SUM(s.duration_minutes), 60) FROM booking_detail bd " +
	            " JOIN service s ON bd.service_id = s.service_id WHERE bd.booking_id = b.booking_id) AS total_duration " +
	            "FROM booking b " +
	            "WHERE DATE(b.booking_time) = ? " +
	            "AND b.status NOT IN ('CANCELLED', 'COMPLETED')";
	        
	        try (Connection conn = DatabaseConnection.getConnection();
	             PreparedStatement stmt = conn.prepareStatement(sql)) {
	            
	            stmt.setDate(1, java.sql.Date.valueOf(date));
	            
	            try (ResultSet rs = stmt.executeQuery()) {
	                while (rs.next()) {
	                    int bookingId = rs.getInt("booking_id");
	                    LocalDateTime startDateTime = rs.getTimestamp("booking_time").toLocalDateTime();
	                    LocalTime startTime = startDateTime.toLocalTime();
	                    
	                    // L·∫•y th·ªùi l∆∞·ª£ng d·ªãch v·ª•
	                    int duration = rs.getInt("total_duration");
	                    if (rs.wasNull() || duration <= 0) {
	                        duration = 60; // M·∫∑c ƒë·ªãnh 60 ph√∫t
	                    }
	                    
	                    // Th√™m buffer 15 ph√∫t
	                    duration += 15;
	                    
	                    // T√≠nh th·ªùi gian k·∫øt th√∫c
	                    LocalTime endTime = startTime.plusMinutes(duration);
	                    
	                    // V√¥ hi·ªáu h√≥a c√°c slots trong kho·∫£ng n√†y
	                    for (String timeSlot : timeSlotAvailability.keySet()) {
	                        try {
	                            LocalTime slotTime = LocalTime.parse(timeSlot, DateTimeFormatter.ofPattern("HH:mm"));
	                            
	                            // M·ªôt slot b·ªã chi·∫øm n·∫øu th·ªùi gian c·ªßa n√≥ n·∫±m gi·ªØa th·ªùi gian b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c c·ªßa m·ªôt booking
	                            if ((slotTime.equals(startTime) || slotTime.isAfter(startTime)) && 
	                                slotTime.isBefore(endTime)) {
	                                timeSlotAvailability.put(timeSlot, false);
	                            }
	                            
	                            // Ho·∫∑c n·∫øu th·ªùi gian k·∫øt th√∫c c·ªßa slot (30 ph√∫t sau) n·∫±m trong kho·∫£ng th·ªùi gian c·ªßa booking
	                            LocalTime slotEndTime = slotTime.plusMinutes(30);
	                            if (slotTime.isBefore(startTime) && slotEndTime.isAfter(startTime)) {
	                                timeSlotAvailability.put(timeSlot, false);
	                            }
	                        } catch (Exception e) {
	                            System.err.println("L·ªói khi x·ª≠ l√Ω slot " + timeSlot + ": " + e.getMessage());
	                            // ƒê√°nh d·∫•u kh√¥ng kh·∫£ d·ª•ng n·∫øu c√≥ l·ªói
	                            timeSlotAvailability.put(timeSlot, false);
	                        }
	                    }
	                }
	            }
	        } catch (Exception e) {
	            System.err.println("L·ªói khi truy v·∫•n booking: " + e.getMessage());
	            e.printStackTrace();
	        }
	        
	        // L·ªçc c√°c slot c√≤n tr·ªëng
	        List<String> availableSlots = timeSlotAvailability.entrySet().stream()
	            .filter(Map.Entry::getValue)
	            .map(Map.Entry::getKey)
	            .collect(Collectors.toList());
	        
	        // C·∫≠p nh·∫≠t ComboBox
	        Platform.runLater(() -> {
	            ObservableList<String> items = FXCollections.observableArrayList(availableSlots);
	            bookingTimeComboBox.setItems(items);
	            
	            // Hi·ªÉn th·ªã th√¥ng b√°o n·∫øu kh√¥ng c√≥ slot n√†o
	            if (items.isEmpty()) {
	                bookingTimeComboBox.setPromptText("Kh√¥ng c√≥ khung gi·ªù n√†o kh·∫£ d·ª•ng");
	                bookingTimeComboBox.setValue(null);
	            } else {
	                bookingTimeComboBox.setPromptText("Ch·ªçn th·ªùi gian");
	                bookingTimeComboBox.setValue(items.get(0)); // Ch·ªçn m·∫∑c ƒë·ªãnh slot ƒë·∫ßu ti√™n
	            }
	        });
	    } catch (Exception e) {
	        Platform.runLater(() -> {
	            System.err.println("L·ªói khi c·∫≠p nh·∫≠t khung gi·ªù kh·∫£ d·ª•ng: " + e.getMessage());
	            e.printStackTrace();
	            showAlert(Alert.AlertType.ERROR, "L·ªói", "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t khung gi·ªù", 
	                "ƒê√£ x·∫£y ra l·ªói: " + e.getMessage());
	            
	            // ƒê·∫∑t m·ªôt gi√° tr·ªã m·∫∑c ƒë·ªãnh ƒë·ªÉ tr√°nh l·ªói
	            bookingTimeComboBox.setItems(FXCollections.observableArrayList());
	            bookingTimeComboBox.setPromptText("Kh√¥ng c√≥ khung gi·ªù kh·∫£ d·ª•ng");
	        });
	    }
	}
/**
 * Hi·ªÉn th·ªã c·ª≠a s·ªï tr·ª£ gi√∫p
 */
			@FXML
			private void showHelp() {
			    Alert helpAlert = new Alert(Alert.AlertType.INFORMATION);
			    helpAlert.setTitle("Tr·ª£ gi√∫p");
			    helpAlert.setHeaderText("H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng m√†n h√¨nh ƒê·∫∑t l·ªãch h·∫πn m·ªõi");
			    helpAlert.setContentText(
			        "1. Nh·∫≠p th√¥ng tin kh√°ch h√†ng:\n" +
			        "   - Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i ƒë·ªÉ t√¨m kh√°ch h√†ng hi·ªán c√≥ ho·∫∑c t·∫°o m·ªõi.\n" +
			        "   - ƒêi·ªÅn t√™n, ƒë·ªãa ch·ªâ, email (ƒë·ªãa ch·ªâ v√† email l√† t√πy ch·ªçn).\n" +
			        "   - Nh·∫•n 'L·ªãch s·ª≠' ƒë·ªÉ xem l·ªãch s·ª≠ ƒë·∫∑t l·ªãch c·ªßa kh√°ch h√†ng.\n\n" +
			        "2. Ch·ªçn th√∫ c∆∞ng:\n" +
			        "   - Ch·ªçn th√∫ c∆∞ng t·ª´ danh s√°ch ho·∫∑c nh·∫≠p t√™n m·ªõi.\n\n" +
			        "3. Ch·ªçn d·ªãch v·ª•:\n" +
			        "   - Ch·ªçn m·ªôt ho·∫∑c nhi·ªÅu d·ªãch v·ª• t·ª´ danh s√°ch (gi·ªØ Ctrl ƒë·ªÉ ch·ªçn nhi·ªÅu).\n\n" +
			        "4. Ch·ªçn th·ªùi gian:\n" +
			        "   - Ch·ªçn ng√†y h·∫πn t·ª´ DatePicker.\n" +
			        "   - Ch·ªçn khung gi·ªù c√≤n tr·ªëng t·ª´ ComboBox.\n" +
			        "   - Ki·ªÉm tra danh s√°ch th·ªùi gian ƒë√£ ƒë·∫∑t ƒë·ªÉ tr√°nh xung ƒë·ªôt.\n\n" +
			        "5. Ghi ch√∫:\n" +
			        "   - Nh·∫≠p ghi ch√∫ n·∫øu c·∫ßn (t√πy ch·ªçn, t·ªëi ƒëa 500 k√Ω t·ª±).\n\n" +
			        "6. L∆∞u ho·∫∑c h·ªßy:\n" +
			        "   - Nh·∫•n 'L∆∞u l·ªãch h·∫πn' ƒë·ªÉ t·∫°o l·ªãch h·∫πn m·ªõi.\n" +
			        "   - Nh·∫•n 'H·ªßy b·ªè' ƒë·ªÉ ƒë√≥ng c·ª≠a s·ªï m√† kh√¥ng l∆∞u."
			    );
			    helpAlert.getDialogPane().setPrefWidth(500);
			    helpAlert.showAndWait();
			}


    private int getServiceDurationFromBooking(Booking booking) {
        if (booking == null) return 60; // M·∫∑c ƒë·ªãnh 60 ph√∫t n·∫øu kh√¥ng c√≥ booking
        
        try (Connection connection = DatabaseConnection.getConnection()) {
            String sql = "SELECT SUM(s.duration_minutes) as total_duration " +
                       "FROM booking_detail bd " +
                       "JOIN service s ON bd.service_id = s.service_id " +
                       "WHERE bd.booking_id = ?";
            
            try (PreparedStatement stmt = connection.prepareStatement(sql)) {
                stmt.setInt(1, booking.getBookingId());
                try (ResultSet rs = stmt.executeQuery()) {
                    if (rs.next()) {
                        int duration = rs.getInt("total_duration");
                        if (rs.wasNull() || duration <= 0) return 60; // M·∫∑c ƒë·ªãnh 60 ph√∫t n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu
                        return duration;
                    }
                }
            }
        } catch (SQLException e) {
            System.err.println("L·ªói khi l·∫•y th·ªùi l∆∞·ª£ng d·ªãch v·ª•: " + e.getMessage());
        }
        return 60; // M·∫∑c ƒë·ªãnh 60 ph√∫t n·∫øu c√≥ l·ªói
    }

    private void loadServices() {
        try {
            List<Service> services = serviceRepository.selectAll().stream()
                .filter(Service::isActive) // Ch·ªâ l·∫•y c√°c d·ªãch v·ª• ƒëang ho·∫°t ƒë·ªông
                .distinct()
                .sorted(Comparator.comparing(Service::getName))
                .collect(Collectors.toList());
                
            serviceListView.getItems().clear();
            serviceListView.getItems().addAll(services);
            
            serviceListView.setCellFactory(listView -> new ListCell<Service>() {
                @Override
                protected void updateItem(Service service, boolean empty) {
                    super.updateItem(service, empty);
                    if (empty || service == null) {
                        setText(null);
                        setStyle("");
                    } else {
                        setText(String.format("%s (%d ph√∫t, %,.0f VND)", 
                            service.getName(), 
                            service.getDurationMinutes(), 
                            service.getPrice()));
                        setStyle("-fx-text-fill: black;");
                    }
                }
            });
            
            if (services.isEmpty()) {
                showAlert(Alert.AlertType.WARNING, "C·∫£nh b√°o", "Kh√¥ng c√≥ d·ªãch v·ª• kh·∫£ d·ª•ng",
                        "Hi·ªán t·∫°i kh√¥ng c√≥ d·ªãch v·ª• n√†o ƒëang ho·∫°t ƒë·ªông.");
            } else {
                serviceListView.getSelectionModel().selectFirst();
            }
        } catch (Exception e) {
            showAlert(Alert.AlertType.ERROR, "L·ªói", "Kh√¥ng th·ªÉ t·∫£i danh s√°ch d·ªãch v·ª•", 
                "L·ªói: " + e.getMessage());
        }
    }

    private void loadPetsByCustomer(int customerId) {
        try {
            List<Pet> pets = petService.findPetsByCustomerId(customerId);
            
            // X√≥a map hi·ªán t·∫°i
            petIdMap.clear();
            
            // T·∫°o danh s√°ch t√™n v√† c·∫≠p nh·∫≠t map petId
            List<String> petNames = new ArrayList<>();
            for (Pet pet : pets) {
                String petName = pet.getName();
                petNames.add(petName);
                petIdMap.put(petName, pet.getPetId());
            }
                
            petComboBox.setItems(FXCollections.observableArrayList(petNames));
            if (!petNames.isEmpty()) {
                petComboBox.setValue(petNames.get(0));
            }
        } catch (Exception e) {
            System.err.println("L·ªói khi t·∫£i danh s√°ch th√∫ c∆∞ng c·ªßa kh√°ch h√†ng: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void searchCustomer(String phone) {
        try {
            Customer customer = customerRepository.findByPhone(phone);
            if (customer != null) {
                selectedCustomer = customer;
                customerNameField.setText(customer.getFullName());
                addressField.setText(customer.getAddress());
                emailField.setText(customer.getEmail());
                loadPetsByCustomer(customer.getId());
                viewHistoryButton.setDisable(false);
            } else {
                clearCustomerData();
                petComboBox.setPromptText("Vui l√≤ng t·∫°o kh√°ch h√†ng m·ªõi tr∆∞·ªõc");
            }
        } catch (Exception e) {
            showAlert(Alert.AlertType.ERROR, "L·ªói", "Kh√¥ng th·ªÉ t√¨m ki·∫øm kh√°ch h√†ng", "L·ªói: " + e.getMessage());
        }
    }

    private boolean checkBookingConflict(LocalDateTime bookingTime, int totalDuration) {
        try {
            // T√≠nh th·ªùi gian k·∫øt th√∫c d·ª± ki·∫øn c·ªßa booking m·ªõi (bao g·ªìm buffer 15 ph√∫t)
            LocalDateTime endTime = bookingTime.plusMinutes(totalDuration + 15);
            
            // Truy v·∫•n ƒë∆°n gi·∫£n, ch·ªâ l·∫•y t·∫•t c·∫£ booking trong ng√†y
            String sql = 
                "SELECT b.booking_id, b.booking_time, cp.full_name AS customer_name, p.name AS pet_name, " +
                "(SELECT GROUP_CONCAT(s.name SEPARATOR ', ') FROM booking_detail bd " +
                " JOIN service s ON bd.service_id = s.service_id WHERE bd.booking_id = b.booking_id) AS service_names, " +
                "(SELECT COALESCE(SUM(s.duration_minutes), 60) FROM booking_detail bd " +
                " JOIN service s ON bd.service_id = s.service_id WHERE bd.booking_id = b.booking_id) AS total_duration " +
                "FROM booking b " +
                "JOIN customer c ON b.customer_id = c.customer_id " +
                "JOIN person cp ON c.customer_id = cp.person_id " +
                "JOIN pet p ON b.pet_id = p.pet_id " +
                "WHERE DATE(b.booking_time) = ? " +
                "AND b.status NOT IN ('CANCELLED', 'COMPLETED')";
            
            try (Connection conn = DatabaseConnection.getConnection();
                 PreparedStatement stmt = conn.prepareStatement(sql)) {
                
                stmt.setDate(1, java.sql.Date.valueOf(bookingTime.toLocalDate()));
                
                try (ResultSet rs = stmt.executeQuery()) {
                    while (rs.next()) {
                        LocalDateTime existingStart = rs.getTimestamp("booking_time").toLocalDateTime();
                        
                        // L·∫•y th·ªùi l∆∞·ª£ng d·ªãch v·ª•, m·∫∑c ƒë·ªãnh 60 ph√∫t n·∫øu null ho·∫∑c 0
                        int duration = rs.getInt("total_duration");
                        if (rs.wasNull() || duration <= 0) {
                            duration = 60;
                        }
                        
                        // T√≠nh th·ªùi gian k·∫øt th√∫c v·ªõi buffer 15 ph√∫t
                        LocalDateTime existingEnd = existingStart.plusMinutes(duration + 15);
                        
                        // Ki·ªÉm tra xung ƒë·ªôt
                        if (bookingTime.isBefore(existingEnd) && endTime.isAfter(existingStart)) {
                            String conflictInfo = String.format(
                                "ƒê√£ c√≥ l·ªãch h·∫πn v√†o khung gi·ªù n√†y:\n" +
                                "Kh√°ch h√†ng: %s\n" +
                                "Th√∫ c∆∞ng: %s\n" +
                                "D·ªãch v·ª•: %s\n" +
                                "Th·ªùi gian: %s",
                                rs.getString("customer_name"),
                                rs.getString("pet_name"),
                                rs.getString("service_names"),
                                existingStart.format(DateTimeFormatter.ofPattern("HH:mm"))
                            );
                            
                            showAlert(Alert.AlertType.WARNING, "Xung ƒë·ªôt l·ªãch h·∫πn", 
                                "Kh√¥ng th·ªÉ ƒë·∫∑t l·ªãch v√†o th·ªùi gian n√†y", conflictInfo);
                            return true;
                        }
                    }
                }
            }
            return false;
        } catch (SQLException e) {
            showAlert(Alert.AlertType.ERROR, "L·ªói", "Kh√¥ng th·ªÉ ki·ªÉm tra xung ƒë·ªôt l·ªãch h·∫πn",
                    "L·ªói SQL: " + e.getMessage());
            e.printStackTrace();
            return true; // Gi·∫£ ƒë·ªãnh c√≥ xung ƒë·ªôt n·∫øu kh√¥ng ki·ªÉm tra ƒë∆∞·ª£c
        }
    }

    @FXML
    public void viewCustomerHistory() {
        if (selectedCustomer == null) {
            showAlert(Alert.AlertType.WARNING, "C·∫£nh b√°o", "Kh√¥ng c√≥ kh√°ch h√†ng",
                    "Vui l√≤ng ch·ªçn m·ªôt kh√°ch h√†ng ƒë·ªÉ xem l·ªãch s·ª≠.");
            return;
        }
        
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/view/staff/CustomerHistoryView.fxml"));
            Parent root = loader.load();
            
            CustomerHistoryController controller = loader.getController();
            controller.initData(selectedCustomer.getId());
            
            Stage modalStage = new Stage();
            modalStage.initModality(Modality.APPLICATION_MODAL);
            modalStage.setTitle("L·ªãch s·ª≠ kh√°ch h√†ng: " + selectedCustomer.getFullName());
            modalStage.setScene(new Scene(root));
            modalStage.showAndWait();
        } catch (IOException e) {
            showAlert(Alert.AlertType.ERROR, "L·ªói", "Kh√¥ng th·ªÉ m·ªü c·ª≠a s·ªï l·ªãch s·ª≠",
                    "L·ªói: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private class ValidationResult {
        boolean success;
        String message;
        
        ValidationResult(boolean success, String message) {
            this.success = success;
            this.message = message;
        }
    }

    private ValidationResult validateInputData() {
        // Ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i
        String phoneNumber = phoneField.getText().trim();
        if (!phoneNumber.matches("^0\\d{9}$")) {
            return new ValidationResult(false, "S·ªë ƒëi·ªán tho·∫°i ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng 0 v√† c√≥ ƒë√∫ng 10 ch·ªØ s·ªë.");
        }

        // Ki·ªÉm tra t√™n kh√°ch h√†ng
        String customerName = customerNameField.getText().trim();
        if (customerName.isEmpty()) {
            return new ValidationResult(false, "T√™n kh√°ch h√†ng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
        }
        if (customerName.length() > 100) {
            return new ValidationResult(false, "T√™n kh√°ch h√†ng kh√¥ng ƒë∆∞·ª£c qu√° 100 k√Ω t·ª±.");
        }
        if (!customerName.matches("^[a-zA-Z√Ä-·ªπ\\s]+$")) {
            return new ValidationResult(false, "T√™n kh√°ch h√†ng ph·∫£i ch·ª©a ch·ªØ c√°i v√† kho·∫£ng tr·∫Øng.");
        }

        // Ki·ªÉm tra ƒë·ªãa ch·ªâ
        String address = addressField.getText().trim();
        if (address.isEmpty()) {
            return new ValidationResult(false, "ƒê·ªãa ch·ªâ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
        }
        if (address.length() > 200) {
            return new ValidationResult(false, "ƒê·ªãa ch·ªâ kh√¥ng ƒë∆∞·ª£c qu√° 200 k√Ω t·ª±.");
        }

        // Ki·ªÉm tra email
        String email = emailField.getText().trim();
        if (!email.isEmpty() && !email.matches("^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$")) {
            return new ValidationResult(false, "Email kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng.");
        }

        // Ki·ªÉm tra th√∫ c∆∞ng
        String petName = petComboBox.getValue();
        if (petName == null || petName.trim().isEmpty()) {
            return new ValidationResult(false, "Vui l√≤ng ch·ªçn ho·∫∑c nh·∫≠p t√™n th√∫ c∆∞ng.");
        }
        if (petName.length() > 50) {
            return new ValidationResult(false, "T√™n th√∫ c∆∞ng kh√¥ng ƒë∆∞·ª£c qu√° 50 k√Ω t·ª±.");
        }

        // Ki·ªÉm tra d·ªãch v·ª•
        ObservableList<Service> selectedServices = serviceListView.getSelectionModel().getSelectedItems();
        if (selectedServices.isEmpty()) {
            return new ValidationResult(false, "Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt d·ªãch v·ª•.");
        }
        
        // Ki·ªÉm tra c√°c d·ªãch v·ª• ƒë√£ ch·ªçn c√≥ ƒëang ho·∫°t ƒë·ªông kh√¥ng
        for (Service service : selectedServices) {
            if (!service.isActive()) {
                return new ValidationResult(false, 
                    "D·ªãch v·ª• '" + service.getName() + "' ƒë√£ ng·ª´ng ho·∫°t ƒë·ªông. Vui l√≤ng ch·ªçn d·ªãch v·ª• kh√°c.");
            }
        }

        // Ki·ªÉm tra ng√†y ƒë·∫∑t l·ªãch
        LocalDate bookingDate = bookingDatePicker.getValue();
        if (bookingDate == null) {
            return new ValidationResult(false, "Vui l√≤ng ch·ªçn ng√†y h·∫πn.");
        }
        
        LocalDate today = LocalDate.now();
        if (bookingDate.isBefore(today)) {
            return new ValidationResult(false, "Kh√¥ng th·ªÉ ƒë·∫∑t l·ªãch cho ng√†y trong qu√° kh·ª©.");
        }
        
        if (bookingDate.isAfter(today.plusMonths(3))) {
            return new ValidationResult(false, "Kh√¥ng th·ªÉ ƒë·∫∑t l·ªãch xa qu√° 3 th√°ng t·ª´ hi·ªán t·∫°i.");
        }

        // Ki·ªÉm tra gi·ªù ƒë·∫∑t l·ªãch
        String timeStr = bookingTimeComboBox.getValue();
        if (timeStr == null || timeStr.isEmpty()) {
            return new ValidationResult(false, "Vui l√≤ng ch·ªçn gi·ªù h·∫πn.");
        }

        // Ki·ªÉm tra gi·ªù c√≥ h·ª£p l·ªá kh√¥ng
        LocalDateTime bookingTime;
        try {
            LocalTime time = LocalTime.parse(timeStr, DateTimeFormatter.ofPattern("HH:mm"));
            bookingTime = LocalDateTime.of(bookingDate, time);
            
            if (bookingTime.isBefore(LocalDateTime.now())) {
                return new ValidationResult(false, "Th·ªùi gian ƒë·∫∑t l·ªãch ph·∫£i l√† th·ªùi gian trong t∆∞∆°ng lai.");
            }
            
            if (time.isBefore(LocalTime.of(8, 0)) || time.isAfter(LocalTime.of(21, 0))) {
                return new ValidationResult(false, "Gi·ªù h·∫πn ph·∫£i t·ª´ 8:00 ƒë·∫øn 21:00.");
            }
        } catch (DateTimeParseException e) {
            return new ValidationResult(false, "Gi·ªù h·∫πn kh√¥ng h·ª£p l·ªá.");
        }

        // Ki·ªÉm tra xung ƒë·ªôt l·ªãch h·∫πn
        int totalDuration = selectedServices.stream()
            .mapToInt(Service::getDurationMinutes)
            .sum();
            
        if (totalDuration <= 0) totalDuration = 60; // ƒê·∫∑t m·∫∑c ƒë·ªãnh l√† 60 ph√∫t n·∫øu kh√¥ng c√≥ th√¥ng tin
            
        try {
            LocalTime time = LocalTime.parse(timeStr, DateTimeFormatter.ofPattern("HH:mm"));
            LocalDateTime bookingDateTime = LocalDateTime.of(bookingDate, time);
            
            if (checkBookingConflict(bookingDateTime, totalDuration)) {
                return new ValidationResult(false, "Th·ªùi gian n√†y ƒë√£ c√≥ l·ªãch h·∫πn kh√°c. Vui l√≤ng ch·ªçn th·ªùi gian kh√°c.");
            }
        } catch (Exception e) {
            System.err.println("L·ªói khi ki·ªÉm tra xung ƒë·ªôt l·ªãch h·∫πn: " + e.getMessage());
            return new ValidationResult(false, "Kh√¥ng th·ªÉ ki·ªÉm tra xung ƒë·ªôt l·ªãch h·∫πn: " + e.getMessage());
        }

        // Ki·ªÉm tra ghi ch√∫
        String notes = notesAreaNewBooking.getText().trim();
        if (notes.length() > 500) {
            return new ValidationResult(false, "Ghi ch√∫ kh√¥ng ƒë∆∞·ª£c qu√° 500 k√Ω t·ª±.");
        }

        return new ValidationResult(true, "");
    }

    private boolean isTimeSlotBooked(int staffId, LocalDateTime bookingTime, int totalDuration) throws Exception {
        try {
            // T√≠nh th·ªùi gian k·∫øt th√∫c d·ª± ki·∫øn c·ªßa booking m·ªõi (bao g·ªìm buffer 15 ph√∫t)
            LocalDateTime endTime = bookingTime.plusMinutes(totalDuration + 15);
            
            // Truy v·∫•n ƒë∆°n gi·∫£n, ch·ªâ l·∫•y t·∫•t c·∫£ booking trong ng√†y
            String sql = 
                "SELECT b.booking_id, b.booking_time, " +
                "(SELECT COALESCE(SUM(s.duration_minutes), 60) FROM booking_detail bd " +
                " JOIN service s ON bd.service_id = s.service_id WHERE bd.booking_id = b.booking_id) AS total_duration " +
                "FROM booking b " +
                "WHERE DATE(b.booking_time) = ? " +
                "AND b.staff_id = ? " +
                "AND b.status NOT IN ('CANCELLED', 'COMPLETED')";
            
            try (Connection conn = DatabaseConnection.getConnection();
                 PreparedStatement stmt = conn.prepareStatement(sql)) {
                
                stmt.setDate(1, java.sql.Date.valueOf(bookingTime.toLocalDate()));
                stmt.setInt(2, staffId);
                
                try (ResultSet rs = stmt.executeQuery()) {
                    while (rs.next()) {
                        LocalDateTime existingStart = rs.getTimestamp("booking_time").toLocalDateTime();
                        
                        // L·∫•y th·ªùi l∆∞·ª£ng d·ªãch v·ª•, m·∫∑c ƒë·ªãnh 60 ph√∫t n·∫øu null ho·∫∑c 0
                        int duration = rs.getInt("total_duration");
                        if (rs.wasNull() || duration <= 0) {
                            duration = 60;
                        }
                        
                        // T√≠nh th·ªùi gian k·∫øt th√∫c v·ªõi buffer 15 ph√∫t
                        LocalDateTime existingEnd = existingStart.plusMinutes(duration + 15);
                        
                        // Ki·ªÉm tra xung ƒë·ªôt
                        // Xung ƒë·ªôt x·∫£y ra khi:
                        // 1. L·ªãch m·ªõi b·∫Øt ƒë·∫ßu trong kho·∫£ng th·ªùi gian c·ªßa l·ªãch hi·ªán c√≥
                        // 2. L·ªãch m·ªõi k·∫øt th√∫c trong kho·∫£ng th·ªùi gian c·ªßa l·ªãch hi·ªán c√≥
                        // 3. L·ªãch m·ªõi bao tr√πm l·ªãch hi·ªán c√≥
                        if (
                            (bookingTime.isEqual(existingStart) || 
                             (bookingTime.isAfter(existingStart) && bookingTime.isBefore(existingEnd))) ||
                            (endTime.isAfter(existingStart) && endTime.isBefore(existingEnd)) ||
                            (bookingTime.isBefore(existingStart) && endTime.isAfter(existingEnd))
                        ) {
                            int bookingId = rs.getInt("booking_id");
                            System.out.println("Ph√°t hi·ªán xung ƒë·ªôt v·ªõi booking ID: " + bookingId + 
                                               ", th·ªùi gian: " + existingStart + " ƒë·∫øn " + existingEnd);
                            return true; // C√≥ xung ƒë·ªôt
                        }
                    }
                }
            }
            return false; // Kh√¥ng c√≥ xung ƒë·ªôt
        } catch (SQLException e) {
            System.err.println("L·ªói khi ki·ªÉm tra xung ƒë·ªôt l·ªãch h·∫πn: " + e.getMessage());
            e.printStackTrace();
            throw new Exception("Kh√¥ng th·ªÉ ki·ªÉm tra xung ƒë·ªôt l·ªãch h·∫πn: " + e.getMessage());
        }
    }
    
    
    @FXML
    private void saveBooking() {
        try {
            // Ki·ªÉm tra nh√¢n vi√™n hi·ªán t·∫°i
            Staff currentStaff = Session.getCurrentStaff();
            if (currentStaff == null) {
                showAlert(Alert.AlertType.ERROR, "L·ªói", "Phi√™n ƒëƒÉng nh·∫≠p kh√¥ng h·ª£p l·ªá",
                        "Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
                closeNewBookingWindow();
                return;
            }

            // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
            ValidationResult validationResult = validateInputData();
            if (!validationResult.success) {
                showAlert(Alert.AlertType.WARNING, "C·∫£nh b√°o", "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá", 
                    validationResult.message);
                return;
            }

            // L·∫•y th√¥ng tin t·ª´ form
            String phoneNumber = phoneField.getText().trim();
            String customerName = customerNameField.getText().trim();
            String address = addressField.getText().trim();
            String email = emailField.getText().trim();
            String petName = petComboBox.getValue().trim();
            ObservableList<Service> selectedServices = serviceListView.getSelectionModel().getSelectedItems();
            LocalDate bookingDate = bookingDatePicker.getValue();
            LocalTime time = LocalTime.parse(bookingTimeComboBox.getValue(), DateTimeFormatter.ofPattern("HH:mm"));
            LocalDateTime bookingTime = LocalDateTime.of(bookingDate, time);
            String notes = notesAreaNewBooking.getText().trim();
            // T√≠nh t·ªïng ti·ªÅn
            double totalAmount = selectedServices.stream()
                .mapToDouble(Service::getPrice)
                .sum();

            // T√≠nh t·ªïng th·ªùi l∆∞·ª£ng d·ªãch v·ª•
            int totalDuration = selectedServices.stream()
                .mapToInt(Service::getDurationMinutes)
                .sum();
                    
            // Ki·ªÉm tra xung ƒë·ªôt l·ªãch tr√¨nh
            if (isTimeSlotBooked(currentStaff.getId(), bookingTime, totalDuration)) {
                showAlert(Alert.AlertType.WARNING, "C·∫£nh b√°o", "Xung ƒë·ªôt l·ªãch tr√¨nh",
                        "Th·ªùi gian n√†y ƒë√£ c√≥ l·ªãch h·∫πn kh√°c. Vui l√≤ng ch·ªçn th·ªùi gian kh√°c.");
                return;
            }

            // T·∫°o kh√°ch h√†ng m·ªõi ho·∫∑c c·∫≠p nh·∫≠t th√¥ng tin kh√°ch h√†ng hi·ªán c√≥
            if (selectedCustomer == null) {
                createNewCustomer(customerName, phoneNumber, address, email);
            } else {
                updateExistingCustomer(customerName, address, email);
            }

            // T√¨m ho·∫∑c t·∫°o th√∫ c∆∞ng
            Pet selectedPet = findOrCreatePet(petName);
            
            // T·∫°o booking v√† c√°c th√¥ng tin li√™n quan trong m·ªôt transaction
            Connection connection = null;
            boolean success = false;
            
            try {
                connection = DatabaseConnection.getConnection();
                connection.setAutoCommit(false);
                
                // 1. T·∫°o booking
                Booking newBooking = new Booking();
                newBooking.setCustomer(selectedCustomer);
                newBooking.setPet(selectedPet);
                newBooking.setStaff(currentStaff);
                newBooking.setBookingTime(bookingTime);
                newBooking.setStatus(StatusEnum.PENDING);
                newBooking.setNote(notes);
                
                int bookingId = createBookingInTransaction(connection, newBooking);
                if (bookingId <= 0) {
                    throw new SQLException("Kh√¥ng th·ªÉ t·∫°o booking");
                }
                
                // L·∫•y booking ƒë√£ t·∫°o
                newBooking.setBookingId(bookingId);
                
                // 2. Th√™m chi ti·∫øt booking (d·ªãch v·ª•)
                for (Service service : selectedServices) {
                    createBookingDetailInTransaction(connection, bookingId, service);
                }
                
                // 3. T·∫°o order
                int orderId = createOrderInTransaction(connection, selectedCustomer, currentStaff, totalAmount);
                if (orderId <= 0) {
                    throw new SQLException("Kh√¥ng th·ªÉ t·∫°o order");
                }
                
                // 4. Th√™m chi ti·∫øt order
                for (Service service : selectedServices) {
                    createOrderDetailInTransaction(connection, orderId, service);
                }
                
                // 5. T·∫°o h√≥a ƒë∆°n (invoice)
                createInvoiceInTransaction(connection, orderId, currentStaff, totalAmount, bookingTime); // Truy·ªÅn bookingTime
                
                // Ho√†n th√†nh transaction
                connection.commit();
                success = true;
                
                // Th√¥ng b√°o th√†nh c√¥ng
                String serviceNames = selectedServices.stream()
                    .map(Service::getName)
                    .collect(Collectors.joining(", "));
                    
                showAlert(Alert.AlertType.INFORMATION, "Th√†nh c√¥ng", "T·∫°o l·ªãch h·∫πn th√†nh c√¥ng",
                    String.format("ƒê√£ t·∫°o l·ªãch h·∫πn cho: %s\nTh√∫ c∆∞ng: %s\nD·ªãch v·ª•: %s\nTh·ªùi gian: %s",
                        selectedCustomer.getFullName(),
                        petName,
                        serviceNames,
                        bookingTime.format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm"))));
                
                // C·∫≠p nh·∫≠t l·∫°i danh s√°ch h√≥a ƒë∆°n n·∫øu c√≥ controller
                if (invoiceViewController != null) {
                    Platform.runLater(() -> {
                        invoiceViewController.setFromDatePickerToSpecificDate(bookingDate); // S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c m·ªõi
                        invoiceViewController.loadInvoices();
                    });
                }
                
                // ƒê√≥ng c·ª≠a s·ªï t·∫°o booking
                closeNewBookingWindow();
                
            } catch (Exception e) {
                if (connection != null) {
                    try {
                        connection.rollback();
                    } catch (SQLException ex) {
                        ex.printStackTrace();
                    }
                }
                showAlert(Alert.AlertType.ERROR, "L·ªói", "L·ªói khi t·∫°o l·ªãch h·∫πn",
                    "ƒê√£ x·∫£y ra l·ªói: " + e.getMessage());
                e.printStackTrace();
            } finally {
                if (connection != null) {
                    try {
                        connection.setAutoCommit(true);
                        connection.close();
                    } catch (SQLException ex) {
                        ex.printStackTrace();
                    }
                }
            }
            
        } catch (Exception e) {
            showAlert(Alert.AlertType.ERROR, "L·ªói", "L·ªói kh√¥ng x√°c ƒë·ªãnh",
                    "ƒê√£ x·∫£y ra l·ªói: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * Ho√†n t·∫•t qu√° tr√¨nh t·∫°o l·ªãch h·∫πn, l∆∞u l·ªãch h·∫πn v√† c·∫≠p nh·∫≠t c√°c th√†nh ph·∫ßn li√™n quan.
     * @param newBooking ƒê·ªëi t∆∞·ª£ng l·ªãch h·∫πn c·∫ßn ƒë∆∞·ª£c ho√†n t·∫•t.
     */
    public void finishBookingCreation(Booking newBooking) {
        try {
            // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
            ValidationResult validationResult = validateInputData();
            if (!validationResult.success) {
                showAlert(Alert.AlertType.WARNING, "C·∫£nh b√°o", "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá", 
                    validationResult.message);
                return;
            }

            // ƒê·∫£m b·∫£o nh√¢n vi√™n hi·ªán t·∫°i h·ª£p l·ªá
            Staff currentStaff = Session.getCurrentStaff();
            if (currentStaff == null) {
                showAlert(Alert.AlertType.ERROR, "L·ªói", "Phi√™n ƒëƒÉng nh·∫≠p kh√¥ng h·ª£p l·ªá",
                        "Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
                closeNewBookingWindow();
                return;
            }

            // Chu·∫©n b·ªã chi ti·∫øt l·ªãch h·∫πn
            ObservableList<Service> selectedServices = serviceListView.getSelectionModel().getSelectedItems();
            String petName = petComboBox.getValue().trim();
            LocalDate bookingDate = bookingDatePicker.getValue();
            LocalTime time = LocalTime.parse(bookingTimeComboBox.getValue(), DateTimeFormatter.ofPattern("HH:mm"));
            LocalDateTime bookingTime = LocalDateTime.of(bookingDate, time);
            String notes = notesAreaNewBooking.getText().trim();

            // Thi·∫øt l·∫≠p thu·ªôc t√≠nh l·ªãch h·∫πn
            newBooking.setStaff(currentStaff);
            newBooking.setBookingTime(bookingTime);
            newBooking.setStatus(StatusEnum.PENDING);
            newBooking.setNote(notes);

            // T√≠nh t·ªïng th·ªùi l∆∞·ª£ng v√† s·ªë ti·ªÅn
            int totalDuration = selectedServices.stream()
                .mapToInt(Service::getDurationMinutes)
                .sum();
            double totalAmount = selectedServices.stream()
                .mapToDouble(Service::getPrice)
                .sum();

            // Ki·ªÉm tra xung ƒë·ªôt l·ªãch tr√¨nh
            if (isTimeSlotBooked(currentStaff.getId(), bookingTime, totalDuration)) {
                showAlert(Alert.AlertType.WARNING, "C·∫£nh b√°o", "Xung ƒë·ªôt l·ªãch tr√¨nh",
                        "Th·ªùi gian n√†y ƒë√£ c√≥ l·ªãch h·∫πn kh√°c. Vui l√≤ng ch·ªçn th·ªùi gian kh√°c.");
                return;
            }

            // T·∫°o ho·∫∑c c·∫≠p nh·∫≠t kh√°ch h√†ng
            String phoneNumber = phoneField.getText().trim();
            String customerName = customerNameField.getText().trim();
            String address = addressField.getText().trim();
            String email = emailField.getText().trim();

            if (selectedCustomer == null) {
                createNewCustomer(customerName, phoneNumber, address, email);
            } else {
                updateExistingCustomer(customerName, address, email);
            }

            // Thi·∫øt l·∫≠p kh√°ch h√†ng cho l·ªãch h·∫πn
            newBooking.setCustomer(selectedCustomer);

            // T√¨m ho·∫∑c t·∫°o th√∫ c∆∞ng
            Pet selectedPet = findOrCreatePet(petName);
            newBooking.setPet(selectedPet);

            // L∆∞u l·ªãch h·∫πn v√† c√°c th·ª±c th·ªÉ li√™n quan trong m·ªôt giao d·ªãch
            Connection connection = null;
            boolean success = false;

            try {
                connection = DatabaseConnection.getConnection();
                connection.setAutoCommit(false);

                // T·∫°o l·ªãch h·∫πn
                int bookingId = createBookingInTransaction(connection, newBooking);
                if (bookingId <= 0) {
                    throw new SQLException("Kh√¥ng th·ªÉ t·∫°o l·ªãch h·∫πn");
                }
                newBooking.setBookingId(bookingId);

                // Th√™m chi ti·∫øt l·ªãch h·∫πn (d·ªãch v·ª•)
                for (Service service : selectedServices) {
                    createBookingDetailInTransaction(connection, bookingId, service);
                }

                // T·∫°o ƒë∆°n h√†ng
                int orderId = createOrderInTransaction(connection, selectedCustomer, currentStaff, totalAmount);
                if (orderId <= 0) {
                    throw new SQLException("Kh√¥ng th·ªÉ t·∫°o ƒë∆°n h√†ng");
                }

                // Th√™m chi ti·∫øt ƒë∆°n h√†ng
                for (Service service : selectedServices) {
                    createOrderDetailInTransaction(connection, orderId, service);
                }

                // T·∫°o h√≥a ƒë∆°n
                createInvoiceInTransaction(connection, orderId, currentStaff, totalAmount, bookingTime); // Truy·ªÅn bookingTime

                // Ho√†n t·∫•t giao d·ªãch
                connection.commit();
                success = true;

                // Th√¥ng b√°o th√†nh c√¥ng
                String serviceNames = selectedServices.stream()
                    .map(Service::getName)
                    .collect(Collectors.joining(", "));
                    
                showAlert(Alert.AlertType.INFORMATION, "Th√†nh c√¥ng", "T·∫°o l·ªãch h·∫πn th√†nh c√¥ng",
                    String.format("ƒê√£ t·∫°o l·ªãch h·∫πn cho: %s\nTh√∫ c∆∞ng: %s\nD·ªãch v·ª•: %s\nTh·ªùi gian: %s",
                        selectedCustomer.getFullName(),
                        petName,
                        serviceNames,
                        bookingTime.format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm"))));

                // C·∫≠p nh·∫≠t InvoiceViewController n·∫øu c√≥
                if (invoiceViewController != null) {
                    Platform.runLater(() -> {
                        invoiceViewController.setFromDatePickerToSpecificDate(bookingDate); // S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c m·ªõi
                        invoiceViewController.loadInvoices();
                    });
                }

                // ƒê√≥ng c·ª≠a s·ªï t·∫°o l·ªãch h·∫πn
                closeNewBookingWindow();

            } catch (Exception e) {
                if (connection != null) {
                    try {
                        connection.rollback();
                    } catch (SQLException ex) {
                        ex.printStackTrace();
                    }
                }
                showAlert(Alert.AlertType.ERROR, "L·ªói", "L·ªói khi t·∫°o l·ªãch h·∫πn",
                    "ƒê√£ x·∫£y ra l·ªói: " + e.getMessage());
                e.printStackTrace();
            } finally {
                if (connection != null) {
                    try {
                        connection.setAutoCommit(true);
                        connection.close();
                    } catch (SQLException ex) {
                        ex.printStackTrace();
                    }
                }
            }

        } catch (Exception e) {
            showAlert(Alert.AlertType.ERROR, "L·ªói", "L·ªói kh√¥ng x√°c ƒë·ªãnh",
                    "ƒê√£ x·∫£y ra l·ªói: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    private void createNewCustomer(String name, String phone, String address, String email) throws SQLException {
        selectedCustomer = new Customer();
        selectedCustomer.setFullName(name);
        selectedCustomer.setPhone(phone);
        selectedCustomer.setAddress(address);
        selectedCustomer.setEmail(email);
        selectedCustomer.setPoint(0);
        selectedCustomer.setGender(GenderEnum.OTHER);

        if (customerRepository.insert(selectedCustomer) <= 0) {
            throw new SQLException("Kh√¥ng th·ªÉ t·∫°o kh√°ch h√†ng m·ªõi.");
        }
    }

    private void updateExistingCustomer(String name, String address, String email) throws SQLException {
        // Ch·ªâ c·∫≠p nh·∫≠t nh·ªØng th√¥ng tin thay ƒë·ªïi
        boolean needUpdate = false;
        
        if (!selectedCustomer.getFullName().equals(name)) {
            selectedCustomer.setFullName(name);
            needUpdate = true;
        }
        
        if (!Objects.equals(selectedCustomer.getAddress(), address)) {
            selectedCustomer.setAddress(address);
            needUpdate = true;
        }
        
        if (!Objects.equals(selectedCustomer.getEmail(), email)) {
            selectedCustomer.setEmail(email);
            needUpdate = true;
        }
        
        if (needUpdate && customerRepository.update(selectedCustomer) <= 0) {
            throw new SQLException("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin kh√°ch h√†ng.");
        }
    }

    private Pet findOrCreatePet(String petName) throws SQLException {
        // Ki·ªÉm tra xem th√∫ c∆∞ng ƒë√£ t·ªìn t·∫°i trong map ch∆∞a
        Integer petId = petIdMap.get(petName);
        if (petId != null) {
            // N·∫øu ƒë√£ c√≥ trong map, l·∫•y t·ª´ repository
            try {
                Pet pet = petRepository.selectById(petId);
                if (pet != null) {
                    return pet;
                }
            } catch (Exception e) {
                System.err.println("L·ªói khi t√¨m th√∫ c∆∞ng theo ID: " + e.getMessage());
            }
        }
        
        // T√¨m th√∫ c∆∞ng theo t√™n v√† ID kh√°ch h√†ng
        try {
            String condition = "p.customer_id = ? AND p.name = ?";
            List<Pet> existingPets = petRepository.selectByCondition(condition, selectedCustomer.getId(), petName);
            
            if (!existingPets.isEmpty()) {
                Pet pet = existingPets.get(0);
                // L∆∞u v√†o map ƒë·ªÉ s·ª≠ d·ª•ng sau n√†y
                petIdMap.put(petName, pet.getPetId());
                return pet;
            }
        } catch (Exception e) {
            System.err.println("L·ªói khi t√¨m th√∫ c∆∞ng theo t√™n: " + e.getMessage());
        }
        
        // N·∫øu kh√¥ng t√¨m th·∫•y, t·∫°o th√∫ c∆∞ng m·ªõi
        try {
            // L·∫•y lo·∫°i th√∫ c∆∞ng m·∫∑c ƒë·ªãnh (ho·∫∑c cho ng∆∞·ªùi d√πng ch·ªçn)
            List<PetType> petTypes = petTypeRepository.selectAll();
            if (petTypes.isEmpty()) {
                throw new SQLException("Kh√¥ng c√≥ lo·∫°i th√∫ c∆∞ng n√†o trong h·ªá th·ªëng.");
            }
            
            PetType defaultType = petTypes.get(0);
            
            Pet newPet = new Pet();
            newPet.setName(petName);
            newPet.setGender(GenderEnum.MALE); // M·∫∑c ƒë·ªãnh l√† gi·ªõi t√≠nh ƒë·ª±c
            newPet.setDob(LocalDate.now().minusYears(1)); // M·∫∑c ƒë·ªãnh l√† 1 tu·ªïi
            newPet.setWeight(1.0); // M·∫∑c ƒë·ªãnh 1kg
            newPet.setTypePet(defaultType);
            newPet.setOwner(selectedCustomer);

            // S·ª≠ d·ª•ng try-with-resources ƒë·ªÉ ƒë·∫£m b·∫£o ƒë√≥ng resources
            try (Connection connection = DatabaseConnection.getConnection();
                 PreparedStatement stmt = connection.prepareStatement(
                     "INSERT INTO pet (name, pet_gender, dob, customer_id, type_id, weight) VALUES (?, ?, ?, ?, ?, ?)",
                     Statement.RETURN_GENERATED_KEYS)) {
                
                stmt.setString(1, petName);
                stmt.setString(2, newPet.getGender().name());
                stmt.setDate(3, java.sql.Date.valueOf(newPet.getDob()));
                stmt.setInt(4, selectedCustomer.getId());
                stmt.setInt(5, newPet.getTypePet().getTypePetID());
                stmt.setDouble(6, newPet.getWeight());

                int rowsAffected = stmt.executeUpdate();
                if (rowsAffected <= 0) {
                    throw new SQLException("Kh√¥ng th·ªÉ t·∫°o th√∫ c∆∞ng m·ªõi.");
                }

                try (ResultSet rs = stmt.getGeneratedKeys()) {
                    if (rs.next()) {
                        newPet.setPetId(rs.getInt(1));
                        // L∆∞u v√†o map ƒë·ªÉ s·ª≠ d·ª•ng sau n√†y
                        petIdMap.put(petName, newPet.getPetId());
                    } else {
                        throw new SQLException("Kh√¥ng th·ªÉ l·∫•y ID th√∫ c∆∞ng sau khi t·∫°o.");
                    }
                }
            }

            // L·∫•y ƒë·∫ßy ƒë·ªß th√¥ng tin th√∫ c∆∞ng t·ª´ database
            return petRepository.selectById(newPet.getPetId());
        } catch (SQLException e) {
            throw new SQLException("L·ªói khi t·∫°o th√∫ c∆∞ng m·ªõi: " + e.getMessage(), e);
        }
    }
    

    // C√°c ph∆∞∆°ng th·ª©c l√†m vi·ªác v·ªõi Transaction
    private int createBookingInTransaction(Connection connection, Booking booking) throws SQLException {
        String sql = "INSERT INTO booking (customer_id, pet_id, staff_id, booking_time, status, note) VALUES (?, ?, ?, ?, ?, ?)";
        
        try (PreparedStatement stmt = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            stmt.setInt(1, booking.getCustomer().getId());
            stmt.setInt(2, booking.getPet().getPetId());
            stmt.setInt(3, booking.getStaff().getId());
            stmt.setTimestamp(4, java.sql.Timestamp.valueOf(booking.getBookingTime()));
            stmt.setString(5, booking.getStatus().name());
            stmt.setString(6, booking.getNote());

            if (stmt.executeUpdate() <= 0) {
                throw new SQLException("Kh√¥ng th·ªÉ t·∫°o booking.");
            }
            
            try (ResultSet rs = stmt.getGeneratedKeys()) {
                if (rs.next()) {
                    return rs.getInt(1);
                }
                throw new SQLException("Kh√¥ng th·ªÉ l·∫•y bookingId.");
            }
        }
    }

    private void createBookingDetailInTransaction(Connection connection, int bookingId, Service service) throws SQLException {
        String sql = "INSERT INTO booking_detail (booking_id, service_id, quantity, price) VALUES (?, ?, ?, ?)";
        
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setInt(1, bookingId);
            stmt.setInt(2, service.getServiceId());
            stmt.setInt(3, 1);
            stmt.setDouble(4, service.getPrice());

            if (stmt.executeUpdate() <= 0) {
                throw new SQLException("Kh√¥ng th·ªÉ t·∫°o booking detail.");
            }
        }
    }

    private int createOrderInTransaction(Connection connection, Customer customer, Staff staff, double totalAmount) throws SQLException {
        String sql = "INSERT INTO `order` (customer_id, staff_id, order_date, total_amount, status) VALUES (?, ?, ?, ?, ?)";
        
        try (PreparedStatement stmt = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            stmt.setInt(1, customer.getId());
            stmt.setInt(2, staff.getId());
            stmt.setTimestamp(3, java.sql.Timestamp.valueOf(LocalDateTime.now()));
            stmt.setDouble(4, totalAmount);
            stmt.setString(5, StatusEnum.PENDING.name());

            if (stmt.executeUpdate() <= 0) {
                throw new SQLException("Kh√¥ng th·ªÉ t·∫°o order.");
            }
            
            try (ResultSet rs = stmt.getGeneratedKeys()) {
                if (rs.next()) {
                    return rs.getInt(1);
                }
                throw new SQLException("Kh√¥ng th·ªÉ l·∫•y orderId.");
            }
        }
    }

    private void createOrderDetailInTransaction(Connection connection, int orderId, Service service) throws SQLException {
        String sql = "INSERT INTO order_detail (order_id, service_id, quantity, price) VALUES (?, ?, ?, ?)";
        
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            if (!service.isActive()) {
                throw new SQLException("D·ªãch v·ª• " + service.getName() + " ƒë√£ ng·ª´ng ho·∫°t ƒë·ªông!");
            }
            
            stmt.setInt(1, orderId);
            stmt.setInt(2, service.getServiceId());
            stmt.setInt(3, 1);
            stmt.setDouble(4, service.getPrice());

            if (stmt.executeUpdate() <= 0) {
                throw new SQLException("Kh√¥ng th·ªÉ t·∫°o order detail.");
            }
        }
    }

    private void createInvoiceInTransaction(Connection connection, int orderId, Staff staff, double amount, LocalDateTime bookingTime) throws SQLException {
        String sql = "INSERT INTO invoice (order_id, staff_id, subtotal, total, payment_date, status) VALUES (?, ?, ?, ?, ?, ?)";
        
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setInt(1, orderId);
            stmt.setInt(2, staff.getId());
            stmt.setBigDecimal(3, BigDecimal.valueOf(amount));
            stmt.setBigDecimal(4, BigDecimal.valueOf(amount));
            stmt.setTimestamp(5, java.sql.Timestamp.valueOf(bookingTime)); // S·ª≠ d·ª•ng bookingTime thay v√¨ LocalDateTime.now()
            stmt.setString(6, StatusEnum.PENDING.name());

            if (stmt.executeUpdate() <= 0) {
                throw new SQLException("Kh√¥ng th·ªÉ t·∫°o h√≥a ƒë∆°n.");
            }
        }
    }

    private String getServiceNameFromBooking(Booking booking) {
        if (booking == null) return "";
        
        try (Connection connection = DatabaseConnection.getConnection();
             PreparedStatement stmt = connection.prepareStatement(
                 "SELECT s.name FROM service s " + 
                 "JOIN booking_detail bd ON s.service_id = bd.service_id " + 
                 "WHERE bd.booking_id = ?")) {
            
            stmt.setInt(1, booking.getBookingId());
            ResultSet rs = stmt.executeQuery();
            
            StringBuilder serviceNames = new StringBuilder();
            while (rs.next()) {
                serviceNames.append(rs.getString("name")).append(", ");
            }
            
            return serviceNames.length() > 0 ? 
                   serviceNames.substring(0, serviceNames.length() - 2) : 
                   "Kh√¥ng c√≥ th√¥ng tin d·ªãch v·ª•";
        } catch (SQLException e) {
            System.err.println("L·ªói khi l·∫•y t√™n d·ªãch v·ª•: " + e.getMessage());
            return "Kh√¥ng c√≥ th√¥ng tin d·ªãch v·ª•";
        }
    }

    @FXML
    private void handleSubmit() {
        saveBooking();
    }

    @FXML
    private void cancelNewBooking() {
        closeNewBookingWindow();
    }

    private void closeNewBookingWindow() {
        Stage stage = (Stage) cancelButton.getScene().getWindow();
        stage.close();
    }

    private void showAlert(Alert.AlertType alertType, String title, String header, String content) {
        Alert alert = new Alert(alertType);
        alert.setTitle(title);
        alert.setHeaderText(header);
        alert.setContentText(content);
        alert.showAndWait();
    }
}